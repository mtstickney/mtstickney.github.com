<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>FiddlyBits</title><link>//mtstickney.github.io/</link><description>A technical blog about fiddly things.</description><lastBuildDate>Wed, 24 Jun 2020 17:37:00 -0400</lastBuildDate><item><title>HTTP Request Hostnames</title><link>//mtstickney.github.io/posts/2020/06/24/http-request-hostnames.html</link><description>&lt;p&gt;How many hostnames can a single &lt;span class="caps"&gt;HTTP&lt;/span&gt; request be associated with? Two,
or three if you&amp;#8217;re using &lt;span class="caps"&gt;SSL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The usual place to specify a virtualhost name is the &lt;code&gt;Host&lt;/code&gt; header;
this is mandatory in &lt;span class="caps"&gt;HTTP&lt;/span&gt; 1.1 requests, so it&amp;#8217;s almost always set
these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;The second place …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Wed, 24 Jun 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2020-06-24:/posts/2020/06/24/http-request-hostnames.html</guid><category>blog</category><category>http</category><category>web</category><category>servers</category><category>nginx</category></item><item><title>Linux Local Traffic Delivery</title><link>//mtstickney.github.io/posts/2020/06/24/linux-local-traffic-delivery.html</link><description>&lt;p&gt;I&amp;#8217;ve recently been setting up a homebrew router, with a small fanless
linux box and Jim Salter&amp;#8217;s &lt;a href="https://arstechnica.com/gadgets/2016/04/the-ars-guide-to-building-a-linux-router-from-scratch/"&gt;homebrew router guide&lt;/a&gt; as
a starting point. In the section where he sets up iptables rules, he
restricts traffic delivered over the loopback interfacee to traffic
from the &lt;code&gt;127.0.0 …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Wed, 24 Jun 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2020-06-24:/posts/2020/06/24/linux-local-traffic-delivery.html</guid><category>blog</category><category>linux</category><category>networking</category><category>iptables</category></item><item><title>Pipes and Permissions</title><link>//mtstickney.github.io/posts/2017/05/08/pipes-and-permissions.html</link><description>&lt;p&gt;&lt;em&gt;The third in a &lt;a href="/tag/work-challenge.html"&gt;series&lt;/a&gt; of technical
challenges encountered in the course of trying to get work&amp;nbsp;done.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you have two components of a system implemented as separate
processes, you need a way for them to communicate. Unless speed is
critical, you&amp;#8217;re likely to use sockets or pipes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Mon, 08 May 2017 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2017-05-08:/posts/2017/05/08/pipes-and-permissions.html</guid><category>blog</category><category>work challenge</category><category>systems programming</category><category>windows</category></item><item><title>Work Challenge #2: Installer Madness</title><link>//mtstickney.github.io/posts/2016/01/30/work-challenge-2-installer-madness.html</link><description>&lt;p&gt;&lt;em&gt;The second in a &lt;a href="/tag/work-challenge.html"&gt;series&lt;/a&gt; of technical
challenges encountered in the course of trying to get work&amp;nbsp;done.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As I mentioned in the previous
&lt;a href="/blog/work-challenge-1-down-the-rabbit-hole.html"&gt;piece&lt;/a&gt; in the
series, the primary language we use at work is often rather
frustrating to work with. In addition to the language itself, the
platform …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Sat, 30 Jan 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2016-01-30:/posts/2016/01/30/work-challenge-2-installer-madness.html</guid><category>blog</category><category>blog</category><category>programming</category><category>abl</category><category>windows</category><category>work challenge</category></item><item><title>Work Challenge #1: Down the Rabbit Hole</title><link>//mtstickney.github.io/posts/2016/01/27/work-challenge-1-down-the-rabbit-hole.html</link><description>&lt;blockquote&gt;
&lt;p&gt;In the desert&lt;br&gt;
 I saw a creature, naked, bestial,&lt;br&gt;
 Who, squatting upon the ground,&lt;br&gt;
 Held his heart in his hands,&lt;br&gt;
 And ate of it.&lt;br&gt;
 I said, &amp;#8220;Is it good, friend?&amp;#8221;&lt;br&gt;
 &amp;#8220;It is bitter&amp;#8212;bitter,&amp;#8221; he&amp;nbsp;answered;  &lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;But I like it&lt;br&gt;
 &amp;#8220;Because it is bitter,&lt;br&gt;
 &amp;#8220;And because it is my heart …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2016-01-27:/posts/2016/01/27/work-challenge-1-down-the-rabbit-hole.html</guid><category>blog</category><category>blog</category><category>programming</category><category>language interop</category><category>abl</category><category>windows</category><category>work challenge</category></item><item><title>Polymorphic Functions in ABL</title><link>//mtstickney.github.io/posts/2015/10/27/polymorphic-functions-in-abl.html</link><description>&lt;p&gt;If you&amp;#8217;ve ever looked at books on refactoring code, there&amp;#8217;s one common
theme among them: every piece of refactoring advice that has ever been
given assumes the existence of an object system in your language&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;At work, we use this crummy business-oriented language called &lt;span class="caps"&gt;ABL&lt;/span&gt;. It
actually …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Tue, 27 Oct 2015 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2015-10-27:/posts/2015/10/27/polymorphic-functions-in-abl.html</guid><category>blog</category><category>abl</category><category>OO</category><category>experiments</category></item><item><title>Look Ma, No IVs!</title><link>//mtstickney.github.io/posts/2015/09/01/look-ma-no-ivs.html</link><description>&lt;p&gt;Encryption algorithms in some modes require three parameters for
encryption and decryption: the encryption key, the data (plaintext or
ciphertext) and an Initialization Vector. Storing IVs is a hassle;
what follows is a cute trick for doing encryption in &lt;span class="caps"&gt;AES&lt;/span&gt; &lt;span class="caps"&gt;CBC&lt;/span&gt;-mode
without explicitly storing or transmitting IVs, and without …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2015-09-01:/posts/2015/09/01/look-ma-no-ivs.html</guid><category>blog</category><category>cryptography</category><category>encryption</category><category>AES</category><category>programming</category></item><item><title>Infrastructure Notes: Pelican Setup</title><link>//mtstickney.github.io/posts/2015/04/26/infrastructure-notes-pelican-setup.html</link><description>&lt;blockquote&gt;
&lt;p&gt;I have slipped the surly bonds of Octopress&lt;br&gt;
 pulled the trigger&lt;br&gt;
 and converted this sucker to Pelican.&lt;br&gt;
 &amp;#8212; definitely not John Gillespie Magee, Jr.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This blog used to be powered by &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;, but
I&amp;#8217;ve just finished converting the whole thing to
&lt;a href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, and wanted to make a few notes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Sun, 26 Apr 2015 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2015-04-26:/posts/2015/04/26/infrastructure-notes-pelican-setup.html</guid><category>blog</category><category>infrastructure note</category><category>blog</category><category>meta</category><category>pelican</category><category>github-pages</category></item><item><title>Abusing Search Paths for Fun and Profit</title><link>//mtstickney.github.io/posts/2013/02/12/abusing-search-paths-for-fun-and-profit.html</link><description>&lt;p&gt;What do you do when you have to use an undocumented function? Reverse
engineer it, naturally. I was recently in the position of having to
automate some functions of an interactive tool provided by my language
environment. The language docs said the procedure I needed could be
extracted from a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Stickney</dc:creator><pubDate>Tue, 12 Feb 2013 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:mtstickney.github.io,2013-02-12:/posts/2013/02/12/abusing-search-paths-for-fun-and-profit.html</guid><category>blog</category><category>worklog</category><category>abl</category></item></channel></rss>